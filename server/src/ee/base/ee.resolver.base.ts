/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteEeArgs } from "./DeleteEeArgs";
import { EeFindManyArgs } from "./EeFindManyArgs";
import { EeFindUniqueArgs } from "./EeFindUniqueArgs";
import { Ee } from "./Ee";
import { EeService } from "../ee.service";

@graphql.Resolver(() => Ee)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EeResolverBase {
  constructor(
    protected readonly service: EeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ee",
    action: "read",
    possession: "any",
  })
  async _eesMeta(
    @graphql.Args() args: EeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ee])
  @nestAccessControl.UseRoles({
    resource: "Ee",
    action: "read",
    possession: "any",
  })
  async ees(@graphql.Args() args: EeFindManyArgs): Promise<Ee[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ee",
    action: "read",
    possession: "own",
  })
  async ee(@graphql.Args() args: EeFindUniqueArgs): Promise<Ee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ee)
  @nestAccessControl.UseRoles({
    resource: "Ee",
    action: "delete",
    possession: "any",
  })
  async deleteEe(@graphql.Args() args: DeleteEeArgs): Promise<Ee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
